#!/usr/bin/python
# Run with no arguments from any directory, with no special setup required.

import ftplib
import hashlib
import os
import re
import shutil
import string
import subprocess
import sys
import tarfile
import tempfile

if len(sys.argv) != 2:
    print "invalid number of arguments"
    print "  usage: ./generate VERSION_OF_TZDATA"
    print "  example: ./generate 2017b"
    sys.exit(1)

target_version = sys.argv[1]
print "Upgrade to " + target_version

# Find the bionic directory, searching upward from this script.
bionic_libc_tools_zoneinfo_dir = os.path.realpath(os.path.dirname(sys.argv[0]))
bionic_libc_tools_dir = os.path.dirname(bionic_libc_tools_zoneinfo_dir)
bionic_libc_dir = os.path.dirname(bionic_libc_tools_dir)
bionic_dir = os.path.dirname(bionic_libc_dir)
bionic_libc_zoneinfo_dir = '%s/libc/zoneinfo' % bionic_dir
if not os.path.isdir(bionic_libc_tools_zoneinfo_dir) or not os.path.isdir(bionic_libc_zoneinfo_dir):
  print "Couldn't find bionic/libc/tools/zoneinfo!"
  sys.exit(1)
print 'Found bionic in %s...' % bionic_dir

regions = ['africa', 'antarctica', 'asia', 'australasia', 'backward', 'etcetera', 'europe', 'northamerica', 'southamerica']

def current_tzdata_version():
  return open('%s/zoneinfo.version' % bionic_libc_zoneinfo_dir).readline().rstrip('\n')


def upgrade_to(version):
  # Switch to a temporary directory.
  filename = "tzdata"+version+".tar.gz"
  url = "https://www.iana.org/time-zones/repository/releases/"+filename
  tmp_dir = tempfile.mkdtemp('-tzdata')
  os.chdir(tmp_dir)
  print 'Created temporary directory "%s"...' % tmp_dir
  filename = tmp_dir + "/" + filename

  print 'Downloading %s to %s.' % (url, filename)
  import urllib
  urllib.urlretrieve(url, filename)
  # ftp.retrbinary('RETR %s' % filename, open(filename, 'wb').write)
  # print 'MD5: %s' % md5_file(filename)

  print 'Extracting...  ' + filename
  os.mkdir('extracted')
  tar = tarfile.open(filename, 'r')
  tar.extractall('extracted')

  print 'Calling zic(1)...'
  os.mkdir('data')
  for region in regions:
    if region != 'backward':
      subprocess.check_call(['zic', '-d', 'data', 'extracted/%s' % region])

  # Collect the data ZoneCompactor needs.
  links = []
  zones = []
  for region in regions:
    for line in open('extracted/%s' % region).readlines():
      fields = string.split(line)
      if len(fields) == 0:
        continue
      elif fields[0] == 'Link':
        links.append('%s %s %s\n' % (fields[0], fields[1], fields[2]))
        zones.append(fields[2])
      elif fields[0] == 'Zone':
        zones.append(fields[1])
  zones.sort()

  # Write it into the "setup" file.
  setup = open('setup', 'w')
  for link in links:
    setup.write(link)
  for zone in zones:
    setup.write('%s\n' % zone)
  setup.close()

  print 'Calling ZoneCompactor...'
  subprocess.check_call(['javac', '-d', '.',
                         '%s/ZoneCompactor.java' % bionic_libc_tools_zoneinfo_dir,
                         '%s/ZoneInfo.java' % bionic_libc_tools_zoneinfo_dir])
  subprocess.check_call(['java', 'ZoneCompactor', 'setup', 'data'])

  print 'Updating bionic from %s to %s...' % (current_tzdata_version(), version)
  # Move the .dat and .idx files...
  if os.path.exists('%s/zoneinfo.dat' % bionic_libc_zoneinfo_dir):
      os.remove('%s/zoneinfo.dat' % bionic_libc_zoneinfo_dir)
  shutil.move('zoneinfo.dat', bionic_libc_zoneinfo_dir)
  if os.path.exists('%s/zoneinfo.idx' % bionic_libc_zoneinfo_dir):
      os.remove('%s/zoneinfo.idx' % bionic_libc_zoneinfo_dir)
  shutil.move('zoneinfo.idx', bionic_libc_zoneinfo_dir)
  # Write the .version file...
  zoneinfo_version = open('%s/zoneinfo.version' % bionic_libc_zoneinfo_dir, 'wb+')
  zoneinfo_version.write('%s\n' % version)
  zoneinfo_version.close()


# URL from "Sources for Time Zone and Daylight Saving Time Data"
# http://www.twinsun.com/tz/tz-link.htm

print 'Looking for new tzdata...'
ftp = ftplib.FTP('ftp.iana.org')
ftp.login()
ftp.cwd('tz/releases')
tzdata_filenames = []
for filename in ftp.nlst():
  if filename.startswith('tzdata201') and filename.endswith("tar.gz"):
    tzdata_filenames.append(filename)
tzdata_filenames.sort()
tzdata_filenames.reverse()
print "newest version available: " + tzdata_filenames[0]

# If you're several releases behind, we'll walk you through the upgrades one by one.
current_version = current_tzdata_version()
print "current tzdata version "+ current_version
if current_version == target_version:
    print 'You already have the latest tzdata (%s)!' % current_version
    sys.exit(0)
upgrade_to(target_version)
